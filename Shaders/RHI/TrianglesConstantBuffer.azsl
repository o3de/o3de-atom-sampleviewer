/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

 #include <Atom/Features/SrgSemantics.azsli>

// Number of triangles that will be rendered on screen
// Uniform limitation need to be taken into consideration for mobile devices
// [ATOM-14949]
#if AZ_TRAIT_CONSTANT_BUFFER_LIMITATIONS

#define MAX_NUMBER_OF_INSTANCES 12

#else

#define MAX_NUMBER_OF_INSTANCES 30

#endif

struct InstanceInfo
{
    column_major float4x4 m_matrix;
    float4 m_colorMultiplier;
    // NOTE: This actually shouldn't be required, but the current validation will give a false positive
    // when the stride isn't the same size as the stride defined on the applicaiton side.
    // This assumes 256 alignment, which is standard for DX12, but is variable in Vulkan
    float padding0[44]; 
};

struct InstanceData
{
    InstanceInfo m_instancesInfo;
};

ShaderResourceGroup TriangleSrg : SRG_PerObject
{
    ConstantBuffer<InstanceData> m_trianglesCB[MAX_NUMBER_OF_INSTANCES];
}

struct VSInput
{
    float3 m_position : POSITION;
    float4 m_color : COLOR0;
    uint m_instanceIndex : SV_InstanceID;
};

struct VSOutput
{
    float4 m_position : SV_Position;
    float4 m_color : COLOR0;
};

VSOutput MainVS(VSInput vsInput)
{
    VSOutput OUT;
    
    InstanceInfo triangleInstanceInfo = TriangleSrg::m_trianglesCB[vsInput.m_instanceIndex].m_instancesInfo;
    
    OUT.m_position = mul(float4(vsInput.m_position, 1.0f),triangleInstanceInfo.m_matrix);
    OUT.m_color = vsInput.m_color * triangleInstanceInfo.m_colorMultiplier;
    
    return OUT;
}

struct PSOutput
{
    float4 m_color : SV_Target0;
};

PSOutput MainPS(VSOutput vsOutput)
{
    PSOutput OUT;
    OUT.m_color = vsOutput.m_color;
    return OUT;
}
